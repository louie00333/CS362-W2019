        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * UnitTest2
        -:    3: * numHandCards()
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:// set NOISY_TEST to 0 to remove printfs from output
        -:   15:#define NOISY_TEST 1
        -:   16:
function main called 3 returned 100% blocks executed 92%
        3:   17:int main() {
        3:   18:    int seed = 1000;
        3:   19:    int numPlayer = 2;
        3:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , remodel, smithy, village, baron, great_hall};
        -:   22:    struct gameState G;
        3:   23:    struct gameState *G_ptr = &G;
        3:   24:    int maxHandCount = 5;
        -:   25:
        -:   26:    // Test 'numHandCards()' function
        -:   27:
        3:   28:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   29:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   30:    G_ptr->handCount[whoseTurn(G_ptr)] = 0;
call    0 returned 100%
        3:   31:    int count = G_ptr->handCount[whoseTurn(G_ptr)];
call    0 returned 100%
        3:   32:    int count2 = numHandCards(G_ptr);
call    0 returned 100%
        3:   33:    printf("handCards = %i\n", count);
call    0 returned 100%
        3:   34:    printf("Current handCount = %i\nCurrent Game handCount = %i\n", count, (int) numHandCards(G_ptr));
call    0 returned 100%
call    1 returned 100%
        3:   35:    assert(count == count2);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        -:   36:    
        -:   37:
        3:   38:    printf("numHandCards() == Passed!\n");
call    0 returned 100%
        -:   39:
        -:   40:}
