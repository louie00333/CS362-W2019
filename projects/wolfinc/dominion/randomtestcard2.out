deck_count Pre: 471
hand_count Pre: 337
actions    Pre: 1
deck_count Post: 470
hand_count Post: 337
actions    Post: 2
----Test 0----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 187
hand_count Pre: 173
actions    Pre: 0
deck_count Post: 186
hand_count Post: 173
actions    Post: 1
----Test 1----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 307
hand_count Pre: 89
actions    Pre: 1
deck_count Post: 306
hand_count Post: 89
actions    Post: 2
----Test 2----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 180
hand_count Pre: 373
actions    Pre: 2
deck_count Post: 179
hand_count Post: 373
actions    Post: 3
----Test 3----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 376
hand_count Pre: 370
actions    Pre: 0
deck_count Post: 375
hand_count Post: 370
actions    Post: 1
----Test 4----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 139
hand_count Pre: 116
actions    Pre: 0
deck_count Post: 138
hand_count Post: 116
actions    Post: 1
----Test 5----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 6
hand_count Pre: 187
actions    Pre: 2
deck_count Post: 5
hand_count Post: 187
actions    Post: 3
----Test 6----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 403
hand_count Pre: 22
actions    Pre: 0
deck_count Post: 402
hand_count Post: 22
actions    Post: 1
----Test 7----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 134
hand_count Pre: 193
actions    Pre: 2
deck_count Post: 133
hand_count Post: 193
actions    Post: 3
----Test 8----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 448
hand_count Pre: 446
actions    Pre: 1
deck_count Post: 447
hand_count Post: 446
actions    Post: 2
----Test 9----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 11
hand_count Pre: 270
actions    Pre: 1
deck_count Post: 10
hand_count Post: 270
actions    Post: 2
----Test 10----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 100
hand_count Pre: 309
actions    Pre: 2
deck_count Post: 99
hand_count Post: 309
actions    Post: 3
----Test 11----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 337
hand_count Pre: 468
actions    Pre: 1
deck_count Post: 336
hand_count Post: 468
actions    Post: 2
----Test 12----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 258
hand_count Pre: 0
actions    Pre: 2
deck_count Post: 257
hand_count Post: 0
actions    Post: 3
----Test 13----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 491
hand_count Pre: 376
actions    Pre: 1
deck_count Post: 490
hand_count Post: 376
actions    Post: 2
----Test 14----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 435
hand_count Pre: 367
actions    Pre: 0
deck_count Post: 434
hand_count Post: 367
actions    Post: 1
----Test 15----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 370
hand_count Pre: 374
actions    Pre: 0
deck_count Post: 369
hand_count Post: 374
actions    Post: 1
----Test 16----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 356
hand_count Pre: 277
actions    Pre: 1
deck_count Post: 355
hand_count Post: 277
actions    Post: 2
----Test 17----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 252
hand_count Pre: 264
actions    Pre: 2
deck_count Post: 251
hand_count Post: 264
actions    Post: 3
----Test 18----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 482
hand_count Pre: 212
actions    Pre: 1
deck_count Post: 481
hand_count Post: 212
actions    Post: 2
----Test 19----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 174
hand_count Pre: 223
actions    Pre: 1
deck_count Post: 173
hand_count Post: 223
actions    Post: 2
----Test 20----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 55
hand_count Pre: 175
actions    Pre: 0
deck_count Post: 54
hand_count Post: 175
actions    Post: 1
----Test 21----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 109
hand_count Pre: 364
actions    Pre: 2
deck_count Post: 108
hand_count Post: 364
actions    Post: 3
----Test 22----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 252
hand_count Pre: 474
actions    Pre: 0
deck_count Post: 251
hand_count Post: 474
actions    Post: 1
----Test 23----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 120
hand_count Pre: 466
actions    Pre: 0
deck_count Post: 119
hand_count Post: 466
actions    Post: 1
----Test 24----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 359
hand_count Pre: 253
actions    Pre: 0
deck_count Post: 358
hand_count Post: 253
actions    Post: 1
----Test 25----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 214
hand_count Pre: 124
actions    Pre: 2
deck_count Post: 213
hand_count Post: 124
actions    Post: 3
----Test 26----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 108
hand_count Pre: 332
actions    Pre: 1
deck_count Post: 107
hand_count Post: 332
actions    Post: 2
----Test 27----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 377
hand_count Pre: 85
actions    Pre: 2
deck_count Post: 376
hand_count Post: 85
actions    Post: 3
----Test 28----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 338
hand_count Pre: 67
actions    Pre: 0
deck_count Post: 337
hand_count Post: 67
actions    Post: 1
----Test 29----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 98
hand_count Pre: 93
actions    Pre: 1
deck_count Post: 97
hand_count Post: 93
actions    Post: 2
----Test 30----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 128
hand_count Pre: 148
actions    Pre: 1
deck_count Post: 127
hand_count Post: 148
actions    Post: 2
----Test 31----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 319
hand_count Pre: 109
actions    Pre: 0
deck_count Post: 318
hand_count Post: 109
actions    Post: 1
----Test 32----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 479
hand_count Pre: 361
actions    Pre: 0
deck_count Post: 478
hand_count Post: 361
actions    Post: 1
----Test 33----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 139
hand_count Pre: 333
actions    Pre: 0
deck_count Post: 138
hand_count Post: 333
actions    Post: 1
----Test 34----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 27
hand_count Pre: 192
actions    Pre: 2
deck_count Post: 26
hand_count Post: 192
actions    Post: 3
----Test 35----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 283
hand_count Pre: 258
actions    Pre: 0
deck_count Post: 282
hand_count Post: 258
actions    Post: 1
----Test 36----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 413
hand_count Pre: 219
actions    Pre: 2
deck_count Post: 412
hand_count Post: 219
actions    Post: 3
----Test 37----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 25
hand_count Pre: 96
actions    Pre: 0
deck_count Post: 24
hand_count Post: 96
actions    Post: 1
----Test 38----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 48
hand_count Pre: 434
actions    Pre: 0
deck_count Post: 47
hand_count Post: 434
actions    Post: 1
----Test 39----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 488
hand_count Pre: 33
actions    Pre: 0
deck_count Post: 487
hand_count Post: 33
actions    Post: 1
----Test 40----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 150
hand_count Pre: 13
actions    Pre: 1
deck_count Post: 149
hand_count Post: 13
actions    Post: 2
----Test 41----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 340
hand_count Pre: 333
actions    Pre: 0
deck_count Post: 339
hand_count Post: 333
actions    Post: 1
----Test 42----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 246
hand_count Pre: 312
actions    Pre: 2
deck_count Post: 245
hand_count Post: 312
actions    Post: 3
----Test 43----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 274
hand_count Pre: 451
actions    Pre: 1
deck_count Post: 273
hand_count Post: 451
actions    Post: 2
----Test 44----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 121
hand_count Pre: 478
actions    Pre: 0
deck_count Post: 120
hand_count Post: 478
actions    Post: 1
----Test 45----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 73
hand_count Pre: 114
actions    Pre: 0
deck_count Post: 72
hand_count Post: 114
actions    Post: 1
----Test 46----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 149
hand_count Pre: 27
actions    Pre: 2
deck_count Post: 148
hand_count Post: 27
actions    Post: 3
----Test 47----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 409
hand_count Pre: 52
actions    Pre: 1
deck_count Post: 408
hand_count Post: 52
actions    Post: 2
----Test 48----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 403
hand_count Pre: 453
actions    Pre: 1
deck_count Post: 402
hand_count Post: 453
actions    Post: 2
----Test 49----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 167
hand_count Pre: 293
actions    Pre: 1
deck_count Post: 166
hand_count Post: 293
actions    Post: 2
----Test 50----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 377
hand_count Pre: 443
actions    Pre: 1
deck_count Post: 376
hand_count Post: 443
actions    Post: 2
----Test 51----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 234
hand_count Pre: 135
actions    Pre: 1
deck_count Post: 233
hand_count Post: 135
actions    Post: 2
----Test 52----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 201
hand_count Pre: 381
actions    Pre: 2
deck_count Post: 200
hand_count Post: 381
actions    Post: 3
----Test 53----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 232
hand_count Pre: 8
actions    Pre: 2
deck_count Post: 231
hand_count Post: 8
actions    Post: 3
----Test 54----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 245
hand_count Pre: 129
actions    Pre: 1
deck_count Post: 244
hand_count Post: 129
actions    Post: 2
----Test 55----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 303
hand_count Pre: 54
actions    Pre: 0
deck_count Post: 302
hand_count Post: 54
actions    Post: 1
----Test 56----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 471
hand_count Pre: 203
actions    Pre: 2
deck_count Post: 470
hand_count Post: 203
actions    Post: 3
----Test 57----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 6
hand_count Pre: 112
actions    Pre: 1
deck_count Post: 5
hand_count Post: 112
actions    Post: 2
----Test 58----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 489
hand_count Pre: 367
actions    Pre: 2
deck_count Post: 488
hand_count Post: 367
actions    Post: 3
----Test 59----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 258
hand_count Pre: 387
actions    Pre: 2
deck_count Post: 257
hand_count Post: 387
actions    Post: 3
----Test 60----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 413
hand_count Pre: 264
actions    Pre: 1
deck_count Post: 412
hand_count Post: 264
actions    Post: 2
----Test 61----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 81
hand_count Pre: 498
actions    Pre: 1
deck_count Post: 80
hand_count Post: 498
actions    Post: 2
----Test 62----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 230
hand_count Pre: 51
actions    Pre: 0
deck_count Post: 229
hand_count Post: 51
actions    Post: 1
----Test 63----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 43
hand_count Pre: 284
actions    Pre: 2
deck_count Post: 42
hand_count Post: 284
actions    Post: 3
----Test 64----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 159
hand_count Pre: 381
actions    Pre: 0
deck_count Post: 158
hand_count Post: 381
actions    Post: 1
----Test 65----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 105
hand_count Pre: 184
actions    Pre: 2
deck_count Post: 104
hand_count Post: 184
actions    Post: 3
----Test 66----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 166
hand_count Pre: 155
actions    Pre: 0
deck_count Post: 165
hand_count Post: 155
actions    Post: 1
----Test 67----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 106
hand_count Pre: 13
actions    Pre: 2
deck_count Post: 105
hand_count Post: 13
actions    Post: 3
----Test 68----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 98
hand_count Pre: 354
actions    Pre: 1
deck_count Post: 97
hand_count Post: 354
actions    Post: 2
----Test 69----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 248
hand_count Pre: 465
actions    Pre: 2
deck_count Post: 247
hand_count Post: 465
actions    Post: 3
----Test 70----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 338
hand_count Pre: 378
actions    Pre: 1
deck_count Post: 337
hand_count Post: 378
actions    Post: 2
----Test 71----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 76
hand_count Pre: 459
actions    Pre: 1
deck_count Post: 75
hand_count Post: 459
actions    Post: 2
----Test 72----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 450
hand_count Pre: 41
actions    Pre: 0
deck_count Post: 449
hand_count Post: 41
actions    Post: 1
----Test 73----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 205
hand_count Pre: 436
actions    Pre: 1
deck_count Post: 204
hand_count Post: 436
actions    Post: 2
----Test 74----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 320
hand_count Pre: 447
actions    Pre: 1
deck_count Post: 319
hand_count Post: 447
actions    Post: 2
----Test 75----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 64
hand_count Pre: 52
actions    Pre: 0
deck_count Post: 63
hand_count Post: 52
actions    Post: 1
----Test 76----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 214
hand_count Pre: 70
actions    Pre: 1
deck_count Post: 213
hand_count Post: 70
actions    Post: 2
----Test 77----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 419
hand_count Pre: 176
actions    Pre: 2
deck_count Post: 418
hand_count Post: 176
actions    Post: 3
----Test 78----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 236
hand_count Pre: 275
actions    Pre: 1
deck_count Post: 235
hand_count Post: 275
actions    Post: 2
----Test 79----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 273
hand_count Pre: 375
actions    Pre: 0
deck_count Post: 272
hand_count Post: 375
actions    Post: 1
----Test 80----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 197
hand_count Pre: 65
actions    Pre: 1
deck_count Post: 196
hand_count Post: 65
actions    Post: 2
----Test 81----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 237
hand_count Pre: 142
actions    Pre: 2
deck_count Post: 236
hand_count Post: 142
actions    Post: 3
----Test 82----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 276
hand_count Pre: 92
actions    Pre: 2
deck_count Post: 275
hand_count Post: 92
actions    Post: 3
----Test 83----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 366
hand_count Pre: 297
actions    Pre: 2
deck_count Post: 365
hand_count Post: 297
actions    Post: 3
----Test 84----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 444
hand_count Pre: 469
actions    Pre: 1
deck_count Post: 443
hand_count Post: 469
actions    Post: 2
----Test 85----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 51
hand_count Pre: 33
actions    Pre: 2
deck_count Post: 50
hand_count Post: 33
actions    Post: 3
----Test 86----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 195
hand_count Pre: 99
actions    Pre: 1
deck_count Post: 194
hand_count Post: 99
actions    Post: 2
----Test 87----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 495
hand_count Pre: 18
actions    Pre: 0
deck_count Post: 494
hand_count Post: 18
actions    Post: 1
----Test 88----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 12
hand_count Pre: 106
actions    Pre: 1
deck_count Post: 11
hand_count Post: 106
actions    Post: 2
----Test 89----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 31
hand_count Pre: 380
actions    Pre: 2
deck_count Post: 30
hand_count Post: 380
actions    Post: 3
----Test 90----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 368
hand_count Pre: 429
actions    Pre: 0
deck_count Post: 367
hand_count Post: 429
actions    Post: 1
----Test 91----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 434
hand_count Pre: 167
actions    Pre: 0
deck_count Post: 433
hand_count Post: 167
actions    Post: 1
----Test 92----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 460
hand_count Pre: 295
actions    Pre: 1
deck_count Post: 459
hand_count Post: 295
actions    Post: 2
----Test 93----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 230
hand_count Pre: 13
actions    Pre: 1
deck_count Post: 229
hand_count Post: 13
actions    Post: 2
----Test 94----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 85
hand_count Pre: 457
actions    Pre: 2
deck_count Post: 84
hand_count Post: 457
actions    Post: 3
----Test 95----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 238
hand_count Pre: 8
actions    Pre: 2
deck_count Post: 237
hand_count Post: 8
actions    Post: 3
----Test 96----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 296
hand_count Pre: 204
actions    Pre: 1
deck_count Post: 295
hand_count Post: 204
actions    Post: 2
----Test 97----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 425
hand_count Pre: 51
actions    Pre: 2
deck_count Post: 424
hand_count Post: 51
actions    Post: 3
----Test 98----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 230
hand_count Pre: 63
actions    Pre: 2
deck_count Post: 229
hand_count Post: 63
actions    Post: 3
----Test 99----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 14
hand_count Pre: 446
actions    Pre: 0
deck_count Post: 13
hand_count Post: 446
actions    Post: 1
----Test 100----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 321
hand_count Pre: 314
actions    Pre: 1
deck_count Post: 320
hand_count Post: 314
actions    Post: 2
----Test 101----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 193
hand_count Pre: 101
actions    Pre: 1
deck_count Post: 192
hand_count Post: 101
actions    Post: 2
----Test 102----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 60
hand_count Pre: 413
actions    Pre: 1
deck_count Post: 59
hand_count Post: 413
actions    Post: 2
----Test 103----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 18
hand_count Pre: 143
actions    Pre: 2
deck_count Post: 17
hand_count Post: 143
actions    Post: 3
----Test 104----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 274
hand_count Pre: 80
actions    Pre: 2
deck_count Post: 273
hand_count Post: 80
actions    Post: 3
----Test 105----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 350
hand_count Pre: 171
actions    Pre: 0
deck_count Post: 349
hand_count Post: 171
actions    Post: 1
----Test 106----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 312
hand_count Pre: 467
actions    Pre: 0
deck_count Post: 311
hand_count Post: 467
actions    Post: 1
----Test 107----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 372
hand_count Pre: 244
actions    Pre: 0
deck_count Post: 371
hand_count Post: 244
actions    Post: 1
----Test 108----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 155
hand_count Pre: 326
actions    Pre: 1
deck_count Post: 154
hand_count Post: 326
actions    Post: 2
----Test 109----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 44
hand_count Pre: 340
actions    Pre: 0
deck_count Post: 43
hand_count Post: 340
actions    Post: 1
----Test 110----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 165
hand_count Pre: 13
actions    Pre: 1
deck_count Post: 164
hand_count Post: 13
actions    Post: 2
----Test 111----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 215
hand_count Pre: 207
actions    Pre: 1
deck_count Post: 214
hand_count Post: 207
actions    Post: 2
----Test 112----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 285
hand_count Pre: 119
actions    Pre: 2
deck_count Post: 284
hand_count Post: 119
actions    Post: 3
----Test 113----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 149
hand_count Pre: 137
actions    Pre: 1
deck_count Post: 148
hand_count Post: 137
actions    Post: 2
----Test 114----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 379
hand_count Pre: 263
actions    Pre: 1
deck_count Post: 378
hand_count Post: 263
actions    Post: 2
----Test 115----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 213
hand_count Pre: 466
actions    Pre: 2
deck_count Post: 212
hand_count Post: 466
actions    Post: 3
----Test 116----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 408
hand_count Pre: 278
actions    Pre: 1
deck_count Post: 407
hand_count Post: 278
actions    Post: 2
----Test 117----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 159
hand_count Pre: 2
actions    Pre: 2
deck_count Post: 158
hand_count Post: 2
actions    Post: 3
----Test 118----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 461
hand_count Pre: 157
actions    Pre: 0
deck_count Post: 460
hand_count Post: 157
actions    Post: 1
----Test 119----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 326
hand_count Pre: 53
actions    Pre: 1
deck_count Post: 325
hand_count Post: 53
actions    Post: 2
----Test 120----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 138
hand_count Pre: 218
actions    Pre: 2
deck_count Post: 137
hand_count Post: 218
actions    Post: 3
----Test 121----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 468
hand_count Pre: 434
actions    Pre: 0
deck_count Post: 467
hand_count Post: 434
actions    Post: 1
----Test 122----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 399
hand_count Pre: 71
actions    Pre: 2
deck_count Post: 398
hand_count Post: 71
actions    Post: 3
----Test 123----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 243
hand_count Pre: 220
actions    Pre: 0
deck_count Post: 242
hand_count Post: 220
actions    Post: 1
----Test 124----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 82
hand_count Pre: 451
actions    Pre: 0
deck_count Post: 81
hand_count Post: 451
actions    Post: 1
----Test 125----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 2
hand_count Pre: 165
actions    Pre: 2
deck_count Post: 1
hand_count Post: 165
actions    Post: 3
----Test 126----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 93
hand_count Pre: 425
actions    Pre: 0
deck_count Post: 92
hand_count Post: 425
actions    Post: 1
----Test 127----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 4
hand_count Pre: 85
actions    Pre: 1
deck_count Post: 3
hand_count Post: 85
actions    Post: 2
----Test 128----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 159
hand_count Pre: 46
actions    Pre: 2
deck_count Post: 158
hand_count Post: 46
actions    Post: 3
----Test 129----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 344
hand_count Pre: 225
actions    Pre: 2
deck_count Post: 343
hand_count Post: 225
actions    Post: 3
----Test 130----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 222
hand_count Pre: 215
actions    Pre: 0
deck_count Post: 221
hand_count Post: 215
actions    Post: 1
----Test 131----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 114
hand_count Pre: 183
actions    Pre: 2
deck_count Post: 113
hand_count Post: 183
actions    Post: 3
----Test 132----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 212
hand_count Pre: 434
actions    Pre: 1
deck_count Post: 211
hand_count Post: 434
actions    Post: 2
----Test 133----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 134
hand_count Pre: 177
actions    Pre: 2
deck_count Post: 133
hand_count Post: 177
actions    Post: 3
----Test 134----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 341
hand_count Pre: 111
actions    Pre: 1
deck_count Post: 340
hand_count Post: 111
actions    Post: 2
----Test 135----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 163
hand_count Pre: 114
actions    Pre: 1
deck_count Post: 162
hand_count Post: 114
actions    Post: 2
----Test 136----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 304
hand_count Pre: 207
actions    Pre: 0
deck_count Post: 303
hand_count Post: 207
actions    Post: 1
----Test 137----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 222
hand_count Pre: 211
actions    Pre: 2
deck_count Post: 221
hand_count Post: 211
actions    Post: 3
----Test 138----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 143
hand_count Pre: 222
actions    Pre: 0
deck_count Post: 142
hand_count Post: 222
actions    Post: 1
----Test 139----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 74
hand_count Pre: 419
actions    Pre: 2
deck_count Post: 73
hand_count Post: 419
actions    Post: 3
----Test 140----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 58
hand_count Pre: 141
actions    Pre: 0
deck_count Post: 57
hand_count Post: 141
actions    Post: 1
----Test 141----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 260
hand_count Pre: 255
actions    Pre: 2
deck_count Post: 259
hand_count Post: 255
actions    Post: 3
----Test 142----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 249
hand_count Pre: 320
actions    Pre: 2
deck_count Post: 248
hand_count Post: 320
actions    Post: 3
----Test 143----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 308
hand_count Pre: 454
actions    Pre: 2
deck_count Post: 307
hand_count Post: 454
actions    Post: 3
----Test 144----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 440
hand_count Pre: 147
actions    Pre: 1
deck_count Post: 439
hand_count Post: 147
actions    Post: 2
----Test 145----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 24
hand_count Pre: 162
actions    Pre: 1
deck_count Post: 23
hand_count Post: 162
actions    Post: 2
----Test 146----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 124
hand_count Pre: 466
actions    Pre: 0
deck_count Post: 123
hand_count Post: 466
actions    Post: 1
----Test 147----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 2
hand_count Pre: 189
actions    Pre: 1
deck_count Post: 1
hand_count Post: 189
actions    Post: 2
----Test 148----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 465
hand_count Pre: 184
actions    Pre: 1
deck_count Post: 464
hand_count Post: 184
actions    Post: 2
----Test 149----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 327
hand_count Pre: 258
actions    Pre: 2
deck_count Post: 326
hand_count Post: 258
actions    Post: 3
----Test 150----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 413
hand_count Pre: 168
actions    Pre: 1
deck_count Post: 412
hand_count Post: 168
actions    Post: 2
----Test 151----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 215
hand_count Pre: 281
actions    Pre: 1
deck_count Post: 214
hand_count Post: 281
actions    Post: 2
----Test 152----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 51
hand_count Pre: 382
actions    Pre: 1
deck_count Post: 50
hand_count Post: 382
actions    Post: 2
----Test 153----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 322
hand_count Pre: 190
actions    Pre: 1
deck_count Post: 321
hand_count Post: 190
actions    Post: 2
----Test 154----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 269
hand_count Pre: 483
actions    Pre: 1
deck_count Post: 268
hand_count Post: 483
actions    Post: 2
----Test 155----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 180
hand_count Pre: 7
actions    Pre: 0
deck_count Post: 179
hand_count Post: 7
actions    Post: 1
----Test 156----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 205
hand_count Pre: 483
actions    Pre: 0
deck_count Post: 204
hand_count Post: 483
actions    Post: 1
----Test 157----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 290
hand_count Pre: 486
actions    Pre: 2
deck_count Post: 289
hand_count Post: 486
actions    Post: 3
----Test 158----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 438
hand_count Pre: 303
actions    Pre: 0
deck_count Post: 437
hand_count Post: 303
actions    Post: 1
----Test 159----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 308
hand_count Pre: 482
actions    Pre: 2
deck_count Post: 307
hand_count Post: 482
actions    Post: 3
----Test 160----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 450
hand_count Pre: 396
actions    Pre: 2
deck_count Post: 449
hand_count Post: 396
actions    Post: 3
----Test 161----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 233
hand_count Pre: 463
actions    Pre: 1
deck_count Post: 232
hand_count Post: 463
actions    Post: 2
----Test 162----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 123
hand_count Pre: 14
actions    Pre: 1
deck_count Post: 122
hand_count Post: 14
actions    Post: 2
----Test 163----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 334
hand_count Pre: 336
actions    Pre: 1
deck_count Post: 333
hand_count Post: 336
actions    Post: 2
----Test 164----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 350
hand_count Pre: 458
actions    Pre: 1
deck_count Post: 349
hand_count Post: 458
actions    Post: 2
----Test 165----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 366
hand_count Pre: 138
actions    Pre: 2
deck_count Post: 365
hand_count Post: 138
actions    Post: 3
----Test 166----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 192
hand_count Pre: 196
actions    Pre: 0
deck_count Post: 191
hand_count Post: 196
actions    Post: 1
----Test 167----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 336
hand_count Pre: 338
actions    Pre: 2
deck_count Post: 335
hand_count Post: 338
actions    Post: 3
----Test 168----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 22
hand_count Pre: 276
actions    Pre: 1
deck_count Post: 21
hand_count Post: 276
actions    Post: 2
----Test 169----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 40
hand_count Pre: 436
actions    Pre: 1
deck_count Post: 39
hand_count Post: 436
actions    Post: 2
----Test 170----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 20
hand_count Pre: 386
actions    Pre: 0
deck_count Post: 19
hand_count Post: 386
actions    Post: 1
----Test 171----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 317
hand_count Pre: 471
actions    Pre: 1
deck_count Post: 316
hand_count Post: 471
actions    Post: 2
----Test 172----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 247
hand_count Pre: 447
actions    Pre: 1
deck_count Post: 246
hand_count Post: 447
actions    Post: 2
----Test 173----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 59
hand_count Pre: 133
actions    Pre: 0
deck_count Post: 58
hand_count Post: 133
actions    Post: 1
----Test 174----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 414
hand_count Pre: 483
actions    Pre: 1
deck_count Post: 413
hand_count Post: 483
actions    Post: 2
----Test 175----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 251
hand_count Pre: 349
actions    Pre: 1
deck_count Post: 250
hand_count Post: 349
actions    Post: 2
----Test 176----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 448
hand_count Pre: 393
actions    Pre: 2
deck_count Post: 447
hand_count Post: 393
actions    Post: 3
----Test 177----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 480
hand_count Pre: 82
actions    Pre: 1
deck_count Post: 479
hand_count Post: 82
actions    Post: 2
----Test 178----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 498
hand_count Pre: 104
actions    Pre: 1
deck_count Post: 497
hand_count Post: 104
actions    Post: 2
----Test 179----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 319
hand_count Pre: 496
actions    Pre: 0
deck_count Post: 318
hand_count Post: 496
actions    Post: 1
----Test 180----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 475
hand_count Pre: 16
actions    Pre: 1
deck_count Post: 474
hand_count Post: 16
actions    Post: 2
----Test 181----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 27
hand_count Pre: 334
actions    Pre: 0
deck_count Post: 26
hand_count Post: 334
actions    Post: 1
----Test 182----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 394
hand_count Pre: 433
actions    Pre: 0
deck_count Post: 393
hand_count Post: 433
actions    Post: 1
----Test 183----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 276
hand_count Pre: 345
actions    Pre: 1
deck_count Post: 275
hand_count Post: 345
actions    Post: 2
----Test 184----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 494
hand_count Pre: 111
actions    Pre: 2
deck_count Post: 493
hand_count Post: 111
actions    Post: 3
----Test 185----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 22
hand_count Pre: 214
actions    Pre: 2
deck_count Post: 21
hand_count Post: 214
actions    Post: 3
----Test 186----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 40
hand_count Pre: 162
actions    Pre: 2
deck_count Post: 39
hand_count Post: 162
actions    Post: 3
----Test 187----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 255
hand_count Pre: 142
actions    Pre: 1
deck_count Post: 254
hand_count Post: 142
actions    Post: 2
----Test 188----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 159
hand_count Pre: 140
actions    Pre: 0
deck_count Post: 158
hand_count Post: 140
actions    Post: 1
----Test 189----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 340
hand_count Pre: 312
actions    Pre: 1
deck_count Post: 339
hand_count Post: 312
actions    Post: 2
----Test 190----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 309
hand_count Pre: 139
actions    Pre: 2
deck_count Post: 308
hand_count Post: 139
actions    Post: 3
----Test 191----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 164
hand_count Pre: 19
actions    Pre: 2
deck_count Post: 163
hand_count Post: 19
actions    Post: 3
----Test 192----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 343
hand_count Pre: 413
actions    Pre: 2
deck_count Post: 342
hand_count Post: 413
actions    Post: 3
----Test 193----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 469
hand_count Pre: 41
actions    Pre: 0
deck_count Post: 468
hand_count Post: 41
actions    Post: 1
----Test 194----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 228
hand_count Pre: 387
actions    Pre: 2
deck_count Post: 227
hand_count Post: 387
actions    Post: 3
----Test 195----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 323
hand_count Pre: 261
actions    Pre: 2
deck_count Post: 322
hand_count Post: 261
actions    Post: 3
----Test 196----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 119
hand_count Pre: 302
actions    Pre: 2
deck_count Post: 118
hand_count Post: 302
actions    Post: 3
----Test 197----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 160
hand_count Pre: 409
actions    Pre: 1
deck_count Post: 159
hand_count Post: 409
actions    Post: 2
----Test 198----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 284
hand_count Pre: 68
actions    Pre: 1
deck_count Post: 283
hand_count Post: 68
actions    Post: 2
----Test 199----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 11
hand_count Pre: 260
actions    Pre: 0
deck_count Post: 10
hand_count Post: 260
actions    Post: 1
----Test 200----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 235
hand_count Pre: 69
actions    Pre: 2
deck_count Post: 234
hand_count Post: 69
actions    Post: 3
----Test 201----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 327
hand_count Pre: 86
actions    Pre: 2
deck_count Post: 326
hand_count Post: 86
actions    Post: 3
----Test 202----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 253
hand_count Pre: 281
actions    Pre: 0
deck_count Post: 252
hand_count Post: 281
actions    Post: 1
----Test 203----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 464
hand_count Pre: 251
actions    Pre: 0
deck_count Post: 463
hand_count Post: 251
actions    Post: 1
----Test 204----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 373
hand_count Pre: 331
actions    Pre: 1
deck_count Post: 372
hand_count Post: 331
actions    Post: 2
----Test 205----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 392
hand_count Pre: 6
actions    Pre: 1
deck_count Post: 391
hand_count Post: 6
actions    Post: 2
----Test 206----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 126
hand_count Pre: 477
actions    Pre: 1
deck_count Post: 125
hand_count Post: 477
actions    Post: 2
----Test 207----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 375
hand_count Pre: 138
actions    Pre: 1
deck_count Post: 374
hand_count Post: 138
actions    Post: 2
----Test 208----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 266
hand_count Pre: 422
actions    Pre: 1
deck_count Post: 265
hand_count Post: 422
actions    Post: 2
----Test 209----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 149
hand_count Pre: 285
actions    Pre: 1
deck_count Post: 148
hand_count Post: 285
actions    Post: 2
----Test 210----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 49
hand_count Pre: 20
actions    Pre: 0
deck_count Post: 48
hand_count Post: 20
actions    Post: 1
----Test 211----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 88
hand_count Pre: 347
actions    Pre: 1
deck_count Post: 87
hand_count Post: 347
actions    Post: 2
----Test 212----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 146
hand_count Pre: 452
actions    Pre: 0
deck_count Post: 145
hand_count Post: 452
actions    Post: 1
----Test 213----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 321
hand_count Pre: 417
actions    Pre: 0
deck_count Post: 320
hand_count Post: 417
actions    Post: 1
----Test 214----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 186
hand_count Pre: 142
actions    Pre: 1
deck_count Post: 185
hand_count Post: 142
actions    Post: 2
----Test 215----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 291
hand_count Pre: 34
actions    Pre: 1
deck_count Post: 290
hand_count Post: 34
actions    Post: 2
----Test 216----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 157
hand_count Pre: 161
actions    Pre: 2
deck_count Post: 156
hand_count Post: 161
actions    Post: 3
----Test 217----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 177
hand_count Pre: 36
actions    Pre: 1
deck_count Post: 176
hand_count Post: 36
actions    Post: 2
----Test 218----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 106
hand_count Pre: 302
actions    Pre: 2
deck_count Post: 105
hand_count Post: 302
actions    Post: 3
----Test 219----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 103
hand_count Pre: 303
actions    Pre: 0
deck_count Post: 102
hand_count Post: 303
actions    Post: 1
----Test 220----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 65
hand_count Pre: 204
actions    Pre: 2
deck_count Post: 64
hand_count Post: 204
actions    Post: 3
----Test 221----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 97
hand_count Pre: 292
actions    Pre: 0
deck_count Post: 96
hand_count Post: 292
actions    Post: 1
----Test 222----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 214
hand_count Pre: 290
actions    Pre: 0
deck_count Post: 213
hand_count Post: 290
actions    Post: 1
----Test 223----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 113
hand_count Pre: 112
actions    Pre: 1
deck_count Post: 112
hand_count Post: 112
actions    Post: 2
----Test 224----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 115
hand_count Pre: 298
actions    Pre: 0
deck_count Post: 114
hand_count Post: 298
actions    Post: 1
----Test 225----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 301
hand_count Pre: 441
actions    Pre: 1
deck_count Post: 300
hand_count Post: 441
actions    Post: 2
----Test 226----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 493
hand_count Pre: 98
actions    Pre: 0
deck_count Post: 492
hand_count Post: 98
actions    Post: 1
----Test 227----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 14
hand_count Pre: 275
actions    Pre: 2
deck_count Post: 13
hand_count Post: 275
actions    Post: 3
----Test 228----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 26
hand_count Pre: 233
actions    Pre: 1
deck_count Post: 25
hand_count Post: 233
actions    Post: 2
----Test 229----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 459
hand_count Pre: 189
actions    Pre: 1
deck_count Post: 458
hand_count Post: 189
actions    Post: 2
----Test 230----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 178
hand_count Pre: 254
actions    Pre: 1
deck_count Post: 177
hand_count Post: 254
actions    Post: 2
----Test 231----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 122
hand_count Pre: 351
actions    Pre: 0
deck_count Post: 121
hand_count Post: 351
actions    Post: 1
----Test 232----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 413
hand_count Pre: 66
actions    Pre: 1
deck_count Post: 412
hand_count Post: 66
actions    Post: 2
----Test 233----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 8
hand_count Pre: 31
actions    Pre: 1
deck_count Post: 7
hand_count Post: 31
actions    Post: 2
----Test 234----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 21
hand_count Pre: 499
actions    Pre: 1
deck_count Post: 20
hand_count Post: 499
actions    Post: 2
----Test 235----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 27
hand_count Pre: 300
actions    Pre: 1
deck_count Post: 26
hand_count Post: 300
actions    Post: 2
----Test 236----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 68
hand_count Pre: 145
actions    Pre: 2
deck_count Post: 67
hand_count Post: 145
actions    Post: 3
----Test 237----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 270
hand_count Pre: 11
actions    Pre: 1
deck_count Post: 269
hand_count Post: 11
actions    Post: 2
----Test 238----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 8
hand_count Pre: 37
actions    Pre: 0
deck_count Post: 7
hand_count Post: 37
actions    Post: 1
----Test 239----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 252
hand_count Pre: 349
actions    Pre: 0
deck_count Post: 251
hand_count Post: 349
actions    Post: 1
----Test 240----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 152
hand_count Pre: 27
actions    Pre: 0
deck_count Post: 151
hand_count Post: 27
actions    Post: 1
----Test 241----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 404
hand_count Pre: 1
actions    Pre: 1
deck_count Post: 403
hand_count Post: 1
actions    Post: 2
----Test 242----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 300
hand_count Pre: 414
actions    Pre: 2
deck_count Post: 299
hand_count Post: 414
actions    Post: 3
----Test 243----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 339
hand_count Pre: 423
actions    Pre: 0
deck_count Post: 338
hand_count Post: 423
actions    Post: 1
----Test 244----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 138
hand_count Pre: 296
actions    Pre: 2
deck_count Post: 137
hand_count Post: 296
actions    Post: 3
----Test 245----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 440
hand_count Pre: 323
actions    Pre: 0
deck_count Post: 439
hand_count Post: 323
actions    Post: 1
----Test 246----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 183
hand_count Pre: 392
actions    Pre: 1
deck_count Post: 182
hand_count Post: 392
actions    Post: 2
----Test 247----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 24
hand_count Pre: 14
actions    Pre: 2
deck_count Post: 23
hand_count Post: 14
actions    Post: 3
----Test 248----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
deck_count Pre: 345
hand_count Pre: 23
actions    Pre: 2
deck_count Post: 344
hand_count Post: 23
actions    Post: 3
----Test 249----
SUCCESSFUL: Actions incremented
SUCCESSFUL: Deck decremented
SUCCESSFUL: Hand static
All tests ran successfully
Execution Time: 0.000000
File 'dominion.c'
Lines executed:21.24% of 565
Branches executed:22.78% of 417
Taken at least once:14.39% of 417
Calls executed:11.58% of 95
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 7500 returned 100% blocks executed 83%
     7500:    8:int compare(const void* a, const void* b) {
     7500:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
     7500:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     2000:   12:    return -1;
     5500:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 250 returned 100% blocks executed 88%
      250:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      250:   44:  SelectStream(1);
call    0 returned 100%
      250:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      250:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      250:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     2750:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    27500:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    25000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      250:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
      250:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      250:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
      250:   89:      state->supplyCount[estate] = 8;
      250:   90:      state->supplyCount[duchy] = 8;
      250:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      250:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      250:  102:  state->supplyCount[silver] = 40;
      250:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     5250:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    41250:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    38750:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     2500:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     1000:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      500:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2000:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     2500:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    36250:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      750:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
      500:  140:      state->deckCount[i] = 0;
     2000:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     1500:  143:	  state->deck[i][j] = estate;
     1500:  144:	  state->deckCount[i]++;
        -:  145:	}
     4000:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     3500:  148:	  state->deck[i][j] = copper;
     3500:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      750:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
      500:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      750:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      500:  166:      state->handCount[i] = 0;
      500:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     7000:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     6750:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      250:  182:  state->outpostPlayed = 0;
      250:  183:  state->phase = 0;
      250:  184:  state->numActions = 1;
      250:  185:  state->numBuys = 1;
      250:  186:  state->playedCardCount = 0;
      250:  187:  state->whoseTurn = 0;
      250:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1500:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1250:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      250:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      250:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 500 returned 100% blocks executed 94%
      500:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      500:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      500:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
      500:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6000:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5000:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     5000:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5000:  217:    newDeckPos++;
    14250:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 65%
branch  1 taken 35% (fallthrough)
     9250:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5000:  221:    state->deckCount[player]--;
        -:  222:  }
     5500:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     5000:  224:    state->deck[player][i] = newDeck[i];
     5000:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      500:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 250 returned 100% blocks executed 100%
      250:  346:int whoseTurn(struct gameState *state) {
      250:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1500 returned 100% blocks executed 38%
     1500:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
     1500:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
     1500:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
     1500:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
     1500:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
     1500:  576:    state->deckCount[player]--;
     1500:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
     1500:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function smithyFunction called 0 returned 0% blocks executed 0%
    #####:  646:void smithyFunction(int handPos, int currentPlayer, struct gameState *state, int i)
        -:  647:{
    #####:  648:  for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  649:  {
    #####:  650:    drawCard(currentPlayer, state);
call    0 never executed
        -:  651:  }
        -:  652:  //discard card from hand
    #####:  653:  discardCard(handPos, currentPlayer+1, state, 0);
call    0 never executed
    #####:  654:}			
        -:  655:
function adventurerFunction called 0 returned 0% blocks executed 0%
    #####:  656:void adventurerFunction(int currentPlayer, struct gameState *state, int drawntreasure, int cardDrawn, int temphand[MAX_HAND], int z)
        -:  657:{
    #####:  658:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####:  659:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  660:    shuffle(currentPlayer, state);
call    0 never executed
        -:  661:  }
    #####:  662:  drawCard(currentPlayer, state);
call    0 never executed
    #####:  663:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  664:  if (cardDrawn == gold || cardDrawn == silver || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  665:    drawntreasure++;
        -:  666:  else{
    #####:  667:    temphand[z]=cardDrawn;
    #####:  668:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  669:    z++;
        -:  670:  }
        -:  671:      }
    #####:  672:      while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####:  673:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  674:  z=z-1;
        -:  675:  }
    #####:  676:}
        -:  677:
function villageFunction called 0 returned 0% blocks executed 0%
    #####:  678:void villageFunction(int currentPlayer, struct gameState *state, int handPos)
        -:  679:{
        -:  680:  //+1 Card
    #####:  681:  drawCard(currentPlayer, state);
call    0 never executed
        -:  682:
        -:  683:  //+2 Actions
    #####:  684:  state->numActions = state->numActions + 3;
        -:  685:
        -:  686:  //discard played card from hand
    #####:  687:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  688:}
        -:  689:
function outpostFunction called 0 returned 0% blocks executed 0%
    #####:  690:void outpostFunction(struct gameState *state, int handPos, int currentPlayer)
        -:  691:{
        -:  692:  //set outpost flag
    #####:  693:  state->outpostPlayed++;
        -:  694:  
        -:  695:  //discard card  
    #####:  696:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  697:}
        -:  698:
function great_hallFunction called 250 returned 100% blocks executed 100%
      250:  699:void great_hallFunction(struct gameState *state, int handPos, int currentPlayer)
        -:  700:{
        -:  701:  //+1 Card
      250:  702:  drawCard(currentPlayer, state);
call    0 returned 100%
        -:  703:  
        -:  704:  //+1 Actions
      250:  705:  state->numActions++;
        -:  706:  
        -:  707:  //discard card from hand
      250:  708:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
      250:  709:}
        -:  710:
function cardEffect called 250 returned 100% blocks executed 3%
      250:  711:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  712:{
      250:  713:  int i = 0;
        -:  714:  int j;
        -:  715:  int k;
        -:  716:  int x;
        -:  717:  int index;
      250:  718:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
      250:  719:  int nextPlayer = currentPlayer + 1;
        -:  720:
      250:  721:  int tributeRevealedCards[2] = {-1, -1};
        -:  722:  int temphand[MAX_HAND];// moved above the if statement
      250:  723:  int drawntreasure=0;
      250:  724:  int cardDrawn=0;
      250:  725:  int z = 0;// this is the counter for the temp hand
      250:  726:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  727:    nextPlayer = 0;
        -:  728:  }
        -:  729:  
        -:  730:	
        -:  731:  //uses switch to select card and perform actions
      250:  732:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 100%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  733:    {
        -:  734:    case adventurer:
    #####:  735:      adventurerFunction(currentPlayer, state, drawntreasure, cardDrawn, temphand, z);
call    0 never executed
    #####:  736:      return 0;
        -:  737:
        -:  738:    case council_room:
        -:  739:      //+4 Cards
    #####:  740:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  741:	{
    #####:  742:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  743:	}
        -:  744:			
        -:  745:      //+1 Buy
    #####:  746:      state->numBuys++;
        -:  747:			
        -:  748:      //Each other player draws a card
    #####:  749:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  750:	{
    #####:  751:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  752:	    {
    #####:  753:	      drawCard(i, state);
call    0 never executed
        -:  754:	    }
        -:  755:	}
        -:  756:			
        -:  757:      //put played card in played card pile
    #####:  758:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  759:			
    #####:  760:      return 0;
        -:  761:			
        -:  762:    case feast:
        -:  763:      //gain card with cost up to 5
        -:  764:      //Backup hand
    #####:  765:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  766:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  767:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  768:      }
        -:  769:      //Backup hand
        -:  770:
        -:  771:      //Update Coins for Buy
    #####:  772:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  773:      x = 1;//Condition to loop on
    #####:  774:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  775:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  776:	  if (DEBUG)
        -:  777:	    printf("None of that card left, sorry!\n");
        -:  778:
        -:  779:	  if (DEBUG){
        -:  780:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  781:	  }
        -:  782:	}
    #####:  783:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  784:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  785:
        -:  786:	  if (DEBUG){
        -:  787:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  788:	  }
        -:  789:	}
        -:  790:	else{
        -:  791:
        -:  792:	  if (DEBUG){
        -:  793:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  794:	  }
        -:  795:
    #####:  796:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  797:	  x = 0;//No more buying cards
        -:  798:
        -:  799:	  if (DEBUG){
        -:  800:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:	  }
        -:  802:
        -:  803:	}
        -:  804:      }     
        -:  805:
        -:  806:      //Reset Hand
    #####:  807:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  808:	state->hand[currentPlayer][i] = temphand[i];
    #####:  809:	temphand[i] = -1;
        -:  810:      }
        -:  811:      //Reset Hand
        -:  812:      			
    #####:  813:      return 0;
        -:  814:			
        -:  815:    case gardens:
    #####:  816:      return -1;
        -:  817:			
        -:  818:    case mine:
    #####:  819:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  820:
    #####:  821:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  822:	{
    #####:  823:	  return -1;
        -:  824:	}
        -:  825:		
    #####:  826:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  827:	{
    #####:  828:	  return -1;
        -:  829:	}
        -:  830:
    #####:  831:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  832:	{
    #####:  833:	  return -1;
        -:  834:	}
        -:  835:
    #####:  836:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  840:
        -:  841:      //discard trashed card
    #####:  842:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  843:	{
    #####:  844:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  845:	    {
    #####:  846:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  847:	      break;
        -:  848:	    }
        -:  849:	}
        -:  850:			
    #####:  851:      return 0;
        -:  852:			
        -:  853:    case remodel:
    #####:  854:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  855:
    #####:  856:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  857:	{
    #####:  858:	  return -1;
        -:  859:	}
        -:  860:
    #####:  861:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  862:
        -:  863:      //discard card from hand
    #####:  864:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  865:
        -:  866:      //discard trashed card
    #####:  867:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  868:	{
    #####:  869:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  870:	    {
    #####:  871:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  872:	      break;
        -:  873:	    }
        -:  874:	}
        -:  875:
        -:  876:
    #####:  877:      return 0;
        -:  878:		
        -:  879:    case smithy:
    #####:  880:      smithyFunction(handPos, currentPlayer, state, i);
call    0 never executed
    #####:  881:      return 0;
        -:  882:
        -:  883:    case village:
    #####:  884:      villageFunction(currentPlayer, state, handPos);
call    0 never executed
    #####:  885:      return 0;
        -:  886:		
        -:  887:    case baron:
    #####:  888:      state->numBuys++;//Increase buys by 1!
    #####:  889:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  890:	int p = 0;//Iterator for hand!
    #####:  891:	int card_not_discarded = 1;//Flag for discard set!
    #####:  892:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  893:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  894:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  895:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  896:	    state->discardCount[currentPlayer]++;
    #####:  897:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  898:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  899:	    }
    #####:  900:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  901:	    state->handCount[currentPlayer]--;
    #####:  902:	    card_not_discarded = 0;//Exit the loop
        -:  903:	  }
    #####:  904:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  905:	    if(DEBUG) {
        -:  906:	      printf("No estate cards in your hand, invalid choice\n");
        -:  907:	      printf("Must gain an estate if there are any\n");
        -:  908:	    }
    #####:  909:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  910:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  911:	      state->supplyCount[estate]--;//Decrement estates
    #####:  912:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  913:		isGameOver(state);
call    0 never executed
        -:  914:	      }
        -:  915:	    }
    #####:  916:	    card_not_discarded = 0;//Exit the loop
        -:  917:	  }
        -:  918:			    
        -:  919:	  else{
    #####:  920:	    p++;//Next card
        -:  921:	  }
        -:  922:	}
        -:  923:      }
        -:  924:			    
        -:  925:      else{
    #####:  926:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  927:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  928:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  929:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  930:	    isGameOver(state);
call    0 never executed
        -:  931:	  }
        -:  932:	}
        -:  933:      }
        -:  934:	    
        -:  935:      
    #####:  936:      return 0;
        -:  937:		
        -:  938:		case great_hall:
      250:  939:      great_hallFunction(state, handPos, currentPlayer);
call    0 returned 100%
      250:  940:      return 0;
        -:  941:		
        -:  942:    case minion:
        -:  943:      //+1 action
    #####:  944:      state->numActions++;
        -:  945:			
        -:  946:      //discard card from hand
    #####:  947:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  948:			
    #####:  949:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  950:	{
    #####:  951:	  state->coins = state->coins + 2;
        -:  952:	}
        -:  953:			
    #####:  954:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  955:	{
        -:  956:	  //discard hand
    #####:  957:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  958:	    {
    #####:  959:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  960:	    }
        -:  961:				
        -:  962:	  //draw 4
    #####:  963:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  964:	    {
    #####:  965:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  966:	    }
        -:  967:				
        -:  968:	  //other players discard hand and redraw if hand size > 4
    #####:  969:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  970:	    {
    #####:  971:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  972:		{
    #####:  973:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  974:		    {
        -:  975:		      //discard hand
    #####:  976:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  977:			{
    #####:  978:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  979:			}
        -:  980:							
        -:  981:		      //draw 4
    #####:  982:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  983:			{
    #####:  984:			  drawCard(i, state);
call    0 never executed
        -:  985:			}
        -:  986:		    }
        -:  987:		}
        -:  988:	    }
        -:  989:				
        -:  990:	}
    #####:  991:      return 0;
        -:  992:		
        -:  993:    case steward:
    #####:  994:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  995:	{
        -:  996:	  //+2 cards
    #####:  997:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  998:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  999:	}
    #####: 1000:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1001:	{
        -: 1002:	  //+2 coins
    #####: 1003:	  state->coins = state->coins + 2;
        -: 1004:	}
        -: 1005:      else
        -: 1006:	{
        -: 1007:	  //trash 2 cards in hand
    #####: 1008:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1009:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1010:	}
        -: 1011:			
        -: 1012:      //discard card from hand
    #####: 1013:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1014:      return 0;
        -: 1015:		
        -: 1016:    case tribute:
    #####: 1017:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1018:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1019:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1020:	  state->deckCount[nextPlayer]--;
        -: 1021:	}
    #####: 1022:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1023:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1024:	  state->discardCount[nextPlayer]--;
        -: 1025:	}
        -: 1026:	else{
        -: 1027:	  //No Card to Reveal
        -: 1028:	  if (DEBUG){
        -: 1029:	    printf("No cards to reveal\n");
        -: 1030:	  }
        -: 1031:	}
        -: 1032:      }
        -: 1033:	    
        -: 1034:      else{
    #####: 1035:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1037:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1038:	    state->deckCount[nextPlayer]++;
    #####: 1039:	    state->discard[nextPlayer][i] = -1;
    #####: 1040:	    state->discardCount[nextPlayer]--;
        -: 1041:	  }
        -: 1042:			    
    #####: 1043:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1044:	} 
    #####: 1045:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1046:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1047:	state->deckCount[nextPlayer]--;
    #####: 1048:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1049:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1050:	state->deckCount[nextPlayer]--;
        -: 1051:      }    
        -: 1052:		       
    #####: 1053:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1054:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1055:	state->playedCardCount++;
    #####: 1056:	tributeRevealedCards[1] = -1;
        -: 1057:      }
        -: 1058:
    #####: 1059:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1060:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1061:	  state->coins += 2;
        -: 1062:	}
        -: 1063:		    
    #####: 1064:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1065:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1066:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1067:	}
        -: 1068:	else{//Action Card
    #####: 1069:	  state->numActions = state->numActions + 2;
        -: 1070:	}
        -: 1071:      }
        -: 1072:	    
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case ambassador:
    #####: 1076:      j = 0;		//used to check if player has enough cards to discard
        -: 1077:
    #####: 1078:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1079:	{
    #####: 1080:	  return -1;				
        -: 1081:	}
        -: 1082:
    #####: 1083:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1084:	{
    #####: 1085:	  return -1;
        -: 1086:	}
        -: 1087:
    #####: 1088:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1089:	{
    #####: 1090:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1091:	    {
    #####: 1092:	      j++;
        -: 1093:	    }
        -: 1094:	}
    #####: 1095:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1096:	{
    #####: 1097:	  return -1;				
        -: 1098:	}
        -: 1099:
        -: 1100:      if (DEBUG) 
        -: 1101:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1102:
        -: 1103:      //increase supply count for choosen card by amount being discarded
    #####: 1104:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1105:			
        -: 1106:      //each other player gains a copy of revealed card
    #####: 1107:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1108:	{
    #####: 1109:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1110:	    {
    #####: 1111:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1112:	    }
        -: 1113:	}
        -: 1114:
        -: 1115:      //discard played card from hand
    #####: 1116:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1117:
        -: 1118:      //trash copies of cards returned to supply
    #####: 1119:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1120:	{
    #####: 1121:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	    {
    #####: 1123:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1124:		{
    #####: 1125:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1126:		  break;
        -: 1127:		}
        -: 1128:	    }
        -: 1129:	}			
        -: 1130:
    #####: 1131:      return 0;
        -: 1132:		
        -: 1133:    case cutpurse:
        -: 1134:
    #####: 1135:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1136:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1137:	{
    #####: 1138:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1139:	    {
    #####: 1140:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1141:		{
    #####: 1142:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1143:		    {
    #####: 1144:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1145:		      break;
        -: 1146:		    }
    #####: 1147:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1148:		    {
    #####: 1149:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1150:			{
        -: 1151:			  if (DEBUG)
        -: 1152:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1153:			}	
    #####: 1154:		      break;
        -: 1155:		    }		
        -: 1156:		}
        -: 1157:					
        -: 1158:	    }
        -: 1159:				
        -: 1160:	}				
        -: 1161:
        -: 1162:      //discard played card from hand
    #####: 1163:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1164:
    #####: 1165:      return 0;
        -: 1166:
        -: 1167:		
        -: 1168:    case embargo: 
        -: 1169:      //+2 Coins
    #####: 1170:      state->coins = state->coins + 2;
        -: 1171:			
        -: 1172:      //see if selected pile is in play
    #####: 1173:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1174:	{
    #####: 1175:	  return -1;
        -: 1176:	}
        -: 1177:			
        -: 1178:      //add embargo token to selected supply pile
    #####: 1179:      state->embargoTokens[choice1]++;
        -: 1180:			
        -: 1181:      //trash card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case outpost:
    #####: 1186:      outpostFunction(state, handPos, currentPlayer);
call    0 never executed
    #####: 1187:	    return 0;
        -: 1188:     	
        -: 1189:    case salvager:
        -: 1190:      //+1 buy
    #####: 1191:      state->numBuys++;
        -: 1192:			
    #####: 1193:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1194:	{
        -: 1195:	  //gain coins equal to trashed card
    #####: 1196:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1197:	  //trash card
    #####: 1198:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1199:	}
        -: 1200:			
        -: 1201:      //discard card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case sea_hag:
    #####: 1206:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1207:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1208:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1209:	  state->discardCount[i]++;
    #####: 1210:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1211:	}
        -: 1212:      }
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case treasure_map:
        -: 1216:      //search hand for another treasure_map
    #####: 1217:      index = -1;
    #####: 1218:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	{
    #####: 1220:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1221:	    {
    #####: 1222:	      index = i;
    #####: 1223:	      break;
        -: 1224:	    }
        -: 1225:	}
    #####: 1226:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1227:	{
        -: 1228:	  //trash both treasure cards
    #####: 1229:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1230:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1231:
        -: 1232:	  //gain 4 Gold cards
    #####: 1233:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1234:	    {
    #####: 1235:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1236:	    }
        -: 1237:				
        -: 1238:	  //return success
    #####: 1239:	  return 1;
        -: 1240:	}
        -: 1241:			
        -: 1242:      //no second treasure_map found in hand
    #####: 1243:      return -1;
        -: 1244:    }
        -: 1245:	
    #####: 1246:  return -1;
        -: 1247:}
        -: 1248:
function discardCard called 250 returned 100% blocks executed 89%
      250: 1249:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1250:{
        -: 1251:	
        -: 1252:  //if card is not trashed, added to Played pile 
      250: 1253:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1254:    {
        -: 1255:      //add card to played pile
      250: 1256:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
      250: 1257:      state->playedCardCount++;
        -: 1258:    }
        -: 1259:	
        -: 1260:  //set played card to -1
      250: 1261:  state->hand[currentPlayer][handPos] = -1;
        -: 1262:	
        -: 1263:  //remove card from player's hand
      250: 1264:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -: 1265:    {
        -: 1266:      //reduce number of cards in hand
        1: 1267:      state->handCount[currentPlayer]--;
        -: 1268:    }
      249: 1269:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1270:    {
        -: 1271:      //reduce number of cards in hand
    #####: 1272:      state->handCount[currentPlayer]--;
        -: 1273:    }
        -: 1274:  else 	
        -: 1275:    {
        -: 1276:      //replace discarded card with last card in hand
      249: 1277:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1278:      //set last card to -1
      249: 1279:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1280:      //reduce number of cards in hand
      249: 1281:      state->handCount[currentPlayer]--;
        -: 1282:    }
        -: 1283:	
      250: 1284:  return 0;
        -: 1285:}
        -: 1286:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1287:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1288:{
        -: 1289:  //Note: supplyPos is enum of choosen card
        -: 1290:	
        -: 1291:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1292:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1293:    {
    #####: 1294:      return -1;
        -: 1295:    }
        -: 1296:	
        -: 1297:  //added card for [whoseTurn] current player:
        -: 1298:  // toFlag = 0 : add to discard
        -: 1299:  // toFlag = 1 : add to deck
        -: 1300:  // toFlag = 2 : add to hand
        -: 1301:
    #####: 1302:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1303:    {
    #####: 1304:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1305:      state->deckCount[player]++;
        -: 1306:    }
    #####: 1307:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1308:    {
    #####: 1309:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1310:      state->handCount[player]++;
        -: 1311:    }
        -: 1312:  else
        -: 1313:    {
    #####: 1314:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1315:      state->discardCount[player]++;
        -: 1316:    }
        -: 1317:	
        -: 1318:  //decrease number in supply pile
    #####: 1319:  state->supplyCount[supplyPos]--;
        -: 1320:	 
    #####: 1321:  return 0;
        -: 1322:}
        -: 1323:
function updateCoins called 250 returned 100% blocks executed 82%
      250: 1324:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1325:{
        -: 1326:  int i;
        -: 1327:	
        -: 1328:  //reset coin count
      250: 1329:  state->coins = 0;
        -: 1330:
        -: 1331:  //add coins for each Treasure card in player's hand
     1500: 1332:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1333:    {
     1250: 1334:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1335:	{
     1000: 1336:	  state->coins += 1;
        -: 1337:	}
      250: 1338:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1339:	{
    #####: 1340:	  state->coins += 2;
        -: 1341:	}
      250: 1342:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1343:	{
    #####: 1344:	  state->coins += 3;
        -: 1345:	}	
        -: 1346:    }	
        -: 1347:
        -: 1348:  //add bonus
      250: 1349:  state->coins += bonus;
        -: 1350:
      250: 1351:  return 0;
        -: 1352:}
        -: 1353:
        -: 1354:
        -: 1355://end of dominion.c
        -: 1356:
