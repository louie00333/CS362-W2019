        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest3.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest2: cardtest3.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest3 -g  cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
function main called 3 returned 100% blocks executed 100%
        3:   23:int main() {
        3:   24:    int seed = 1000;
        3:   25:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        3:   26:    int numPlayer = 2;
        3:   27:    int thisPlayer = 0;
        -:   28:    int coppers[MAX_HAND];
        3:   29:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   30:               , remodel, smithy, village, baron, great_hall};
        -:   31:    struct gameState G, Gtest;
        3:   32:    struct gameState *G_ptr = &G;
        3:   33:    struct gameState *Gtest_ptr = &Gtest;
        3:   34:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        -:   35:
        -:   36:    // Test: 'ADVENTURER' card
        3:   37:    printf("----------------TESTING CARD: ADVENTURER---------------\n");
call    0 returned 100%
        -:   38:
        -:   39:    // Test 1: Enough Treasure cards in deck
        3:   40:    memcpy(Gtest_ptr, G_ptr, sizeof(struct gameState));
        3:   41:    memcpy(Gtest.deck[thisPlayer], coppers, sizeof(int) * 5);  //Set Deck to size 3
        3:   42:    Gtest.deckCount[thisPlayer] = 5;
        3:   43:    Gtest.deck[thisPlayer][2] = copper;
        3:   44:    Gtest.deck[thisPlayer][3] = copper;
        3:   45:    cardEffect(adventurer, choice1, choice2, choice3, Gtest_ptr, handpos, &bonus);
call    0 returned 100%
        3:   46:	printf("deck count = %d, expected = %d\n", Gtest.deckCount[thisPlayer], G.deckCount[thisPlayer]);
call    0 returned 100%
        -:   47:	//assert(Gtest.deckCount[thisPlayer] >= G.deckCount[thisPlayer]);
        -:   48:
        -:   49:    // Test 2: Not Enough Treasure cards in deck
        3:   50:    memcpy(Gtest_ptr, G_ptr, sizeof(struct gameState));
        3:   51:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   52:    memcpy(Gtest.deck[thisPlayer], coppers, sizeof(int) * 3);  //Set Deck to size 3
        3:   53:    Gtest.deckCount[thisPlayer] = 3;
        3:   54:    Gtest.deck[thisPlayer][0] = duchy;
        3:   55:    Gtest.deck[thisPlayer][1] = duchy;
        3:   56:    Gtest.playedCards[Gtest.playedCardCount++] = copper;   // Add Two coppers to discard pile
        3:   57:    Gtest.playedCards[Gtest.playedCardCount++] = copper;
        3:   58:    cardEffect(adventurer, choice1, choice2, choice3, Gtest_ptr, handpos, &bonus);
call    0 returned 100%
        3:   59:    printf("Player hand count = %d, expected = %d\n", Gtest.handCount[thisPlayer], G.handCount[thisPlayer]);
call    0 returned 100%
        -:   60:	//assert(Gtest.handCount[thisPlayer] == G.handCount[thisPlayer] + 2);
        3:   61:    printf("TEST - \'ADVENTURER\' PASSED");
call    0 returned 100%
        -:   62:}
