        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * UnitTest3
        -:    3: * gainCard()
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:// set NOISY_TEST to 0 to remove printfs from output
        -:   15:#define NOISY_TEST 1
        -:   16:
function main called 3 returned 100% blocks executed 85%
        3:   17:int main() {
        3:   18:    int seed = 1000;
        3:   19:    int numPlayer = 2;
        3:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , remodel, smithy, village, baron, great_hall};
        -:   22:    struct gameState G;
        3:   23:    struct gameState *G_ptr = &G;
        3:   24:    int supplyPos = 0; //Pick first card as test card
        -:   25:    // Test 'gainCard()' function
        -:   26:
        -:   27:    // Iterate through 'gainCard '
        3:   28:    printf("Testing toFlag\n");
call    0 returned 100%
        3:   29:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   30:        initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   31:        G.supplyCount[0] = 0;
        -:   32:        
        3:   33:        supplyCount(supplyPos, G_ptr);
call    0 returned 100%
        3:   34:        int gotCard = gainCard(supplyPos, G_ptr, 0, 0);
call    0 returned 100%
        3:   35:        assert(gotCard == -1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:   36:        printf("Test without supp: PASS\n");
call    0 returned 100%
        -:   37:
        -:   38:        //Test i == 1
        3:   39:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   40:        initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   41:        G.supplyCount[supplyPos] = 10;
        3:   42:        int beforeAdd = G.deckCount[0];
        3:   43:        gainCard(supplyPos, G_ptr, 1, 0);
call    0 returned 100%
        3:   44:        int afterAdd =  G.deckCount[0];
        3:   45:        assert(beforeAdd == afterAdd - 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:   46:        printf("Deck addition: PASS\n");
call    0 returned 100%
        -:   47:
        -:   48:        //Test i == 2
        3:   49:        memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   50:        initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   51:        G.supplyCount[supplyPos] = 10;
        3:   52:        beforeAdd = G.handCount[0];
        3:   53:        gainCard(supplyPos, G_ptr, 2, 0);
call    0 returned 100%
        3:   54:        afterAdd =  G.handCount[0];
        3:   55:        assert(beforeAdd == afterAdd - 1);
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
call    2 never executed
        3:   56:        printf("Hand addition: PASS\n");
call    0 returned 100%
        -:   57:    
        3:   58:    printf("All tests Passed!\n");
call    0 returned 100%
        -:   59:}
