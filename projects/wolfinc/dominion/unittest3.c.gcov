        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * UnitTest3
        -:    3: * isGameOver()
        -:    4: * -----------------------------------------------------------------------
        -:    5: */
        -:    6:
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:
        -:   14:// set NOISY_TEST to 0 to remove printfs from output
        -:   15:#define NOISY_TEST 1
        -:   16:
function main called 3 returned 100% blocks executed 84%
        3:   17:int main() {
        3:   18:    int seed = 1000;
        3:   19:    int numPlayer = 2;
        3:   20:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   21:               , remodel, smithy, village, baron, great_hall};
        -:   22:    struct gameState G;
        3:   23:    struct gameState *G_ptr = &G;
        -:   24:
        -:   25:    // Test 'isGameOver()' function
        -:   26:
        -:   27:    // TEST1: Province Cards
        3:   28:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   29:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   30:    G.supplyCount[province] = 0;
        3:   31:    assert(isGameOver(G_ptr) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   32:    printf("TEST1.1 PASS\n");
call    0 returned 100%
        -:   33:
        3:   34:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   35:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   36:    G.supplyCount[province] = 1;
        3:   37:    assert(isGameOver(G_ptr) == 0);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   38:    printf("TEST1.2 PASS\n"); 
call    0 returned 100%
        -:   39:
        -:   40:    // TEST2: Three supply piles
        3:   41:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   42:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   43:    G.supplyCount[1] = 0;
        3:   44:    G.supplyCount[2] = 0;
        3:   45:    G.supplyCount[3] = 0;
        3:   46:    assert(isGameOver(G_ptr) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   47:    printf("TEST2.1 PASS\n"); 
call    0 returned 100%
        -:   48:    
        -:   49:
        3:   50:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   51:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
        3:   52:    G.supplyCount[23] = 0;
        3:   53:    G.supplyCount[22] = 0;
        3:   54:    G.supplyCount[21] = 0;
        3:   55:    assert(isGameOver(G_ptr) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   56:    printf("TEST2.2 PASS\n"); 
call    0 returned 100%
        -:   57:
        3:   58:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        3:   59:    initializeGame(numPlayer, k, seed, G_ptr);
call    0 returned 100%
       75:   60:    for(int i = 0; i < 24; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:   61:    {
       72:   62:        G.supplyCount[i] = 0;
        -:   63:    }
        3:   64:    assert(isGameOver(G_ptr) == 1);
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
call    3 never executed
        3:   65:    printf("TEST2.3 PASS\n"); 
call    0 returned 100%
        -:   66:
        3:   67:    printf("All Tests Passed!\n");
call    0 returned 100%
        -:   68:
        -:   69:}
